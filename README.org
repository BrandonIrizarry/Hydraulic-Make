#+TITLE: Hydraulic Make
#+AUTHOR: Brandon C. Irizarry

* Copyright
Copyright (C) 2001-2023 Brandon C. Irizarry.
See the end of the file for license conditions.

* Installation
This package requires Emacs>=29.

One could use the following Elisp code for installation. Note that the
package's tests depend on another one I've written, =ert-fixtures=.

#+begin_src emacs-lisp
  (package-vc-install "https://github.com/BrandonIrizarry/ert-fixtures" "main" 'Git)
  (package-vc-install "https://github.com/BrandonIrizarry/Hydraulic-Make" "main" 'Git 'hmake)
#+end_src

* Introduction
Hydraulic Make, or ~hmake~ for short, is an Emacs library to aid in
compiling and running Java projects. It accepts a file as input. It
calculates the dependencies of that file, and checks to see which ones
have been updated. These in turn are used to output a compilation
command.

For example, say I have a Java project under =~/Java/Project=. The
main function for this application is under
=~/Java/Project/src/application/Main.java=. Furthermore, I prefer that
all compilation output be included under a project subdirectory
=bin=.

I must first setup the project environment from Eshell. Eshell was
specifically chosen because integration with it from Emacs is
trivial. I specify the project root directory, as well as the source
and class directories:

#+begin_example
$ hmake-setup :root ~/Java/Project :src src :bin bin
#+end_example

This defines =eshell/hmake-build-command=, which accepts the file we
want to run as input. When run, it'll insert the needed build command
into the Eshell prompt.

#+begin_example
$ hmake-build-command application/Main.java
#+end_example

The above command will launch the heart of Hydraulic Make: it'll
discover any dependencies of =application/Main.java= that have been
modified since the last build. After doing so, the prompt text is
replaced with the appropriate build command.

In this case, let's assume that =application/Main.java= depends on
=geometry/objects/Point.java=, and that, of all the dependencies, only
the latter was modified since the last build. We'd then get the
following as our new prompt text.

#+begin_example
$ javac -g -cp "lib/*:bin" -d bin ~/Java/Project/src/geometry/objects/Point.java
#+end_example

As an aside, note that =application/Main.java= itself counts as one of
its dependencies, since to run the current version of said file we
must of course rebuild it.

After compiling, all that's left is to run =application.Main=. To make
running the application more convenient, =eshell/hmake-build-command=
defines =eshell/hmake-run-command=, which takes in no arguments.

#+begin_example
$ hmake-run-command
#+end_example

After executing the above, the prompt text is replaced with the
appropriate run command.

#+begin_example
$ java -cp "lib/*:bin" application.Main
#+end_example

If =hmake-build-command= discovers that there is nothing to rebuild,
then it will still define =hmake-run-command=, but will also
immediately insert the run command.

* Possible improvements
+ Make compilation command more configurable (e.g, debug flags,
  setting library subdirectory other than "lib")
+ If needed, cache the dependencies of a given file if it hasn't been
  modified.

* License Conditions
You should have received a copy of the GNU General Public License
along with Hydraulic Make.  If not, see
<https://www.gnu.org/licenses/>.
